name: hd_server
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
permissions:
  id-token: write
  contents: write
env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: hdserver
  ECS_TASK_DEFINITION: ./task-definition.json
  ECS_SERVICE: hd_server_service
  ECS_CLUSTER: hd_server_cluster
  CONTAINER_NAME: hd_server

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 23
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '23'

      # properties 파일 생성(application.yaml)
      - name: Make application.yaml
        env:
          PROPERTIES: ${{ secrets.DEPLOY_YAML }}
          DIR_PATH: ./src/main/resources
        run: |
          mkdir -p $DIR_PATH
          cd $DIR_PATH
          touch application.yml
          echo $PROPERTIES > application.yml
          echo "${{ secrets.DEPLOY_YAML }}" | yq eval . -


      - name: Run chmod to make gradlew executable
        run: chmod +x ./gradlew

      # 빌드
      - name: Build and Gradle
        uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
        with:
          arguments: clean bootJar

#      - name: Login to DockerHub
#        uses: docker/login-action@v1
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}

#      - name: DockerHub Upload
#        id: build-image
#        env:
#          NAME: ${{ secrets.DOCKERHUB_USERNAME }}
#          REPO: ${{ secrets.DOCKERHUB_REPO }}
#          IMAGE_TAG: ${{ github.sha }}
#        run: |
#          docker build -t $REPO .
#          docker tag $REPO:latest $NAME/$REPO:$IMAGE_TAG
#          docker push $NAME/$REPO:$IMAGE_TAG
#          echo "image=$NAME/$REPO:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::463470956721:role/hd_server_ecs_role
          role-session-name: sampleSessionName
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-action/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

      - name: Build and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG .
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new Image in the ECS task Definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true